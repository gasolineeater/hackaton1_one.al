components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        id:
          type: integer
          description: User ID
        username:
          type: string
          description: User's username
        email:
          type: string
          format: email
          description: User's email
        password:
          type: string
          format: password
          description: User's password
        role:
          type: string
          enum: [user, admin]
          description: User's role
        company_name:
          type: string
          description: User's company name
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      example:
        id: 1
        username: johndoe
        email: john@example.com
        role: user
        company_name: Example Corp
        created_at: 2023-01-01T00:00:00.000Z
        updated_at: 2023-01-01T00:00:00.000Z
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email
        password:
          type: string
          format: password
          description: User's password
      example:
        email: john@example.com
        password: Password123!
    
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: User's username
        email:
          type: string
          format: email
          description: User's email
        password:
          type: string
          format: password
          description: User's password
        role:
          type: string
          enum: [user, admin]
          description: User's role
        company_name:
          type: string
          description: User's company name
      example:
        username: johndoe
        email: john@example.com
        password: Password123!
        role: user
        company_name: Example Corp
    
    AuthResponse:
      type: object
      properties:
        id:
          type: integer
          description: User ID
        username:
          type: string
          description: User's username
        email:
          type: string
          format: email
          description: User's email
        role:
          type: string
          enum: [user, admin]
          description: User's role
        company_name:
          type: string
          description: User's company name
        accessToken:
          type: string
          description: JWT access token
      example:
        id: 1
        username: johndoe
        email: john@example.com
        role: user
        company_name: Example Corp
        accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
      example:
        message: Invalid credentials

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account and return authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Get current user profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
